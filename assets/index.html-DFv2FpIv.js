import{_ as a,c as i,a as l,o as t}from"./app-Cp3LFcV5.js";const r={};function n(s,e){return t(),i("div",null,[...e[0]||(e[0]=[l(`<h2 id="_1-加密系统更新" tabindex="-1"><a class="header-anchor" href="#_1-加密系统更新"><span>1. 加密系统更新</span></a></h2><ul><li><p>使用基于 C++ 语言的加密算法，用于加密模型和缓存。并以更安全的方式实现，大幅提高安全性；</p></li><li><p>设计了新的模型格式以承载加密模型。现在加密的模型文件不再直接包含 json 源文件，而是转换为 YSM 专有的格式。即使被破解也很难还原出模型源文件，更不能重新导入 Blockbench；</p></li><li><p>设计了加密的网络协议，用于服务端与客户端之间的模型同步，提高服务端模型的安全性；</p></li><li><p>增加了模组自身的校验，<mark>任何对模组本身的修改</mark>都会导致无法正常使用。</p></li><li><p>因为新版加密系统使用了 C++，所以无法在 ARM 架构的设备上运行，<mark>比如大部分手机用户</mark>。</p></li><li><p>旧版加密虽然已经不安全，但由于缓存加密的更新和网络协议加密，只要旧版加密模型仅放在服务端，并且服主可信，那么它仍然是安全的；</p></li><li><p>在加密模型文件的头部添加了一段描述文本，用 windows 自带的记事本打开即可看到模型的简略信息。也可用于辨别旧版和新版加密模型。（win7 系统下可能乱码，建议用 VSCode 等更专业的工具查看）。由于新版加密模型有自校验，在加密模型上二次修改这些文本将导致整个模型文件都无法被 YSM 加载。</p></li></ul><h2 id="_2-性能与安全性优化" tabindex="-1"><a class="header-anchor" href="#_2-性能与安全性优化"><span>2. 性能与安全性优化</span></a></h2><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><ul><li><p>重写渲染器，<mark>大幅提高帧数</mark>，同时降低了额外玩家渲染的开销 <a href="https://github.com/TartaricAcid/ysm/issues/21" target="_blank" rel="noopener noreferrer">#21</a>；（在 optifine 下可能有渲染错误，打开设置中的“兼容渲染器”即可解决）</p></li><li><p>提高模型加载速度，首次加载模型不再阻塞主线程，不会拖慢进入游戏的时间；</p></li><li><p>修复了内存泄露，<mark>不会玩得越久越卡</mark> <a href="https://github.com/TartaricAcid/ysm/issues/23" target="_blank" rel="noopener noreferrer">#23</a>；</p></li><li><p>不使用 Java 自带的序列化库，不再受 Pipe Bleeding 远程代码执行漏洞的影响。</p></li><li><p>缩放为 0 的块不再渲染</p></li></ul><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h3><ul><li>支持限制 YSM 在同步模型期间的带宽占用，默认为 5 Mbps，可防止同步模型期间吃满带宽影响正常游戏；</li><li>降低同步模型期间的内存占用。配合带宽限制，能使额外的内存占用始终保持在一个较低的水平；</li><li>支持修改服务端重载模型的并发数。如果是以 YSM 模组为主体的服务器，可以适当提高并发数以降低重载模型的耗时，最好不要高于 CPU 核心数；</li><li>当重命名服务端模型，或把模型在 custom 和 auth 目录之间移动，重载时不再需要重新同步整个模型至客户端；</li><li>现在只能由服务端发起模型同步，降低了空包攻击的影响 <a href="https://github.com/TartaricAcid/ysm/issues/20" target="_blank" rel="noopener noreferrer">#20</a>；</li><li>当服务端删除了某个模型，重载后客户端也会删除对应的模型缓存；</li></ul><h2 id="_3-bug-与兼容性修正" tabindex="-1"><a class="header-anchor" href="#_3-bug-与兼容性修正"><span>3. Bug 与兼容性修正</span></a></h2><ul><li>单人游戏不开作弊也能执行 /ysm 指令；</li><li>现在重复播放 <code>Extra、Swing、Hold、Use</code> 动画能够生效了</li><li>即使玩家停止挥动，播放的 <code>Swing</code> 也会在一直播放到完毕。所以模型作者可以制作更长时间的攻击动画。</li><li>兼容简单飞机与沉浸飞机，以及原理相似的同类模组；</li><li>手部动画的组分为实际的左手动作和右手动作</li><li>十字弓动画正常播放，不再和 Hold 动画冲突</li><li>能够兼容拔刀剑的渲染（需要模型作者提供名为 <code>LeftWaistLocator</code>，<code>RightWaistLocator</code> 的组）</li><li>能够兼容 Carry On 模组的动作渲染（新增名为 <code>carryon.animation.json</code> 动画文件）</li><li>使用单独的 <code>info.json</code> 文件记录模型作者信息，避免 Blockbench 修改模型时导致信息丢失</li><li>不再替换 <code>Corpse</code> 、<code>Taterzens</code> 等模组的实体模型 <a href="https://github.com/TartaricAcid/ysm/issues/28" target="_blank" rel="noopener noreferrer">#28</a>；</li><li>修复多人游戏下不显示他人原版模型皮肤的问题；（没错，这是客户端的问题）</li><li><mark>未安装 YSM 的客户端可以加入有 YSM 的服务器，反之亦然。</mark></li><li><code>math.atan(value)</code> 与 <code>math.atan2(y,x)</code> 无法使用</li><li>修复 <code>query.player_level, ysm.first_person_mod_hide, query.yaw_speed</code> 等变量数值问题</li><li>修复第一人称模组相关 molang 变量与 oculus 的兼容问题</li><li>修复玩家移动时还能播放轮盘动画的问题</li></ul><h2 id="_4-功能更新" tabindex="-1"><a class="header-anchor" href="#_4-功能更新"><span>4. 功能更新</span></a></h2><h3 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项"><span>杂项</span></a></h3><ul><li><p>现在能够自定义射出的箭的模型了。模型和材质文件名分别为固定的 <code>arrow.json</code> 和 <code>arrow.png</code>，动画文件名为 <code>arrow.animation.json</code> （可选）。更多细节可参考内置的默认模型；</p></li><li><p>重载模型时如果有模型加载失败，会随重载指令的结果反馈失败的原因；</p></li><li><p>模型切换界面可以再次按下快捷键关闭窗口</p></li><li><p>模型切换界面搜索框，点击框外能够取消聚焦</p></li><li><p>添加可以同步到客户端的配置，能够禁用模型切换功能</p></li><li><p>现在 Hold，Swing 动画也能用冒号开头的内置分类了，内置分类现在可以区分：剑，铲，盾，锄，斧，投掷药水</p></li><li><p>模型可以添加 free 字段，添加后此模型即使放入 Auth 文件夹，也会显示为非授权模型</p></li><li><p>修正动画示例界面按钮文字溢出问题</p></li></ul><h3 id="动画系统" tabindex="-1"><a class="header-anchor" href="#动画系统"><span>动画系统</span></a></h3><ul><li>支持更多插值类型：如<mark>平滑，步帧</mark>等</li><li>降低 Extra 动画的优先级至低于 Parallel 动画；</li><li>更换 Molang 引擎，支持更多语法特性和更便利的调试方式，添加更多 Molang 变量。</li></ul><h2 id="_5-molang-系统更新" tabindex="-1"><a class="header-anchor" href="#_5-molang-系统更新"><span>5. Molang 系统更新</span></a></h2><h3 id="_1-新增语法特性支持" tabindex="-1"><a class="header-anchor" href="#_1-新增语法特性支持"><span>① 新增语法特性支持</span></a></h3><ul><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Strings" target="_blank" rel="noopener noreferrer">字符串类型</a></li><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Variables" target="_blank" rel="noopener noreferrer">自定义变量</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#??%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer">空值合并运算符</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener noreferrer">二元条件运算符</a></li><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Aliases" target="_blank" rel="noopener noreferrer">别名</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener noreferrer">复杂表达式</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%7B%7D%E8%8A%B1%E6%8B%AC%E5%8F%B7%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AE%9A%E7%95%8C%E7%AC%A6" target="_blank" rel="noopener noreferrer">作用域定界符</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#loop" target="_blank" rel="noopener noreferrer">loop 循环</a>，<a href="https://wiki.mcbe-dev.net/zh-cn/Molang#continue" target="_blank" rel="noopener noreferrer">continue</a>、<a href="https://wiki.mcbe-dev.net/zh-cn/Molang#break" target="_blank" rel="noopener noreferrer">break</a>（for_each 也支持，但目前没用到）</li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E7%BB%93%E6%9E%84%E4%BD%93" target="_blank" rel="noopener noreferrer">结构体</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#-%3E%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer">箭头表达式</a></li></ul><h3 id="_2-与基岩版的差异" tabindex="-1"><a class="header-anchor" href="#_2-与基岩版的差异"><span>② 与基岩版的差异</span></a></h3><ul><li>未初始化的变量为 null 值，可以用空值合并运算符识别，参与数值类计算时被视为 0 或 false；</li><li>结构体不支持嵌套；</li><li>玩家在切换模型、重生、传送至部分维度、退出重进以及其他类似操作后将清空所有变量存储。</li></ul><h3 id="_3-指令" tabindex="-1"><a class="header-anchor" href="#_3-指令"><span>③ 指令</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/ysmclient molang execute &lt;expr&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在本地玩家身上执行 molang 表达式，并输出结果至聊天框。</p><p>（仅单人游戏有效）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/ysmclient molang watch add pre/post &lt;name&gt; &lt;expr&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>向自定义调试屏幕添加 molang 表达式，会实时计算和更新；</p><p>pre 意为在动画更新前执行，post 在动画更新后执行。</p><p>（按两次 alt + B 才能进入自定义调试屏幕）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/ysmclient molang watch remove &lt;name&gt;</span></span>
<span class="line"><span>/ysmclient molang watch clear</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>管理自定义调试屏幕上的条目。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/ysm molang execute &lt;player&gt; &lt;expr&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在指定玩家身上执行 molang；多人游戏下可用，需要管理员权限。</p><p>（不会输出执行结果）</p><h3 id="_4-函数和变量" tabindex="-1"><a class="header-anchor" href="#_4-函数和变量"><span>④ 函数和变量</span></a></h3><h4 id="roaming-变量" tabindex="-1"><a class="header-anchor" href="#roaming-变量"><span><code>roaming</code> 变量</span></a></h4><p>以 <code>v.roaming.xxx</code> 格式书写的变量（<mark>不能</mark>简写为 <code>v.r.xxx</code>）可以在切换维度、重生、退出重进后恢复。也能在玩家之间同步会，并且会跟随服务端的 cap 写入存档。</p><p>但是此变量有一些限制：</p><ul><li>一个模型最多有 16 个 <code>roaming</code> 变量</li><li>变量名称的字符数不能大于 16</li><li>变量只能存储 <code>float</code></li></ul><h4 id="query-debug-output" tabindex="-1"><a class="header-anchor" href="#query-debug-output"><span>query.debug_output()</span></a></h4><ul><li>描述：输出消息至聊天框，仅在动画调试模式下有效；</li><li>参数：任意类型，任意数量；</li><li>返回值：null 。</li></ul><p>例：<code>query.debug_output(&#39;喵&#39;, 1, 2, 3)</code></p><p>聊天框显示： <code>喵123</code></p><p>返回：<code>null</code></p><h4 id="math-min-angle" tabindex="-1"><a class="header-anchor" href="#math-min-angle"><span>math.min_angle()</span></a></h4><ul><li>描述：计算指定角度在 [-180, 180) 内的等效角度；</li></ul><p>例：<code>math.min_angle(780)</code></p><p>返回：<code>60</code></p><h4 id="query-cape-flap-amount" tabindex="-1"><a class="header-anchor" href="#query-cape-flap-amount"><span>query.cape_flap_amount</span></a></h4><ul><li>描述：获取披风飘起的程度，即使玩家没穿披风也有效；</li><li>返回值：0 - 1 的数值。0 为完全垂下，1 完全飘起。</li></ul><p>例：<code>q.cape_flap_amount</code></p><p>返回：<code>0.35</code></p><h4 id="query-position" tabindex="-1"><a class="header-anchor" href="#query-position"><span>query.position()</span></a></h4><ul><li>描述：获取实体所处的位置坐标；</li><li>参数：0-2 的整数，分别指的 X、Y、Z 分量；</li><li>返回值：玩家位置坐标的指定分量；</li></ul><p>例：<code>q.position(1)</code>（获取玩家位置的 Y 坐标）</p><p>返回：<code>1003.23</code></p><h4 id="query-position-delta" tabindex="-1"><a class="header-anchor" href="#query-position-delta"><span>query.position_delta()</span></a></h4><ul><li>描述：获取实体的位置坐标自上次更新动画以来的差值，与帧率有关；</li><li>参数/返回值：0-2 的整数，分别指坐标差值的 X、Y、Z 分量；</li><li>返回值：玩家位置坐标差值的指定分量。</li></ul><p>例1：<code>q.position_delta(0)</code>（获取玩家位置差值的 X 分量）</p><p>例1返回：<code>-0.076</code></p><p>例2：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.time0 &gt; 0 &amp;&amp; q.life_time - v.time0 &gt; 0 ? (v.speed_x = (q.position_delta(0) - v.x0) / (q.life_time - v.time0));</span></span>
<span class="line"><span>v.x0 = q.position_delta(0);</span></span>
<span class="line"><span>v.time0 = q.life_time;</span></span>
<span class="line"><span>return v.speed_x;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例2返回：<code>19.03</code></p><h4 id="ysm-in-ground" tabindex="-1"><a class="header-anchor" href="#ysm-in-ground"><span>ysm.in_ground</span></a></h4><ul><li>描述：判断箭矢是否掉在地上</li><li>返回：布尔值</li></ul><p>例：<code>ysm.in_ground</code></p><p>返回：<code>true</code></p><h4 id="ysm-on-ground-time" tabindex="-1"><a class="header-anchor" href="#ysm-on-ground-time"><span>ysm.on_ground_time</span></a></h4><ul><li>描述：获取箭矢在地上躺了多久</li><li>返回：整数，单位为 tick</li></ul><h4 id="ysm-is-spectral-arrow" tabindex="-1"><a class="header-anchor" href="#ysm-is-spectral-arrow"><span>ysm.is_spectral_arrow</span></a></h4><ul><li>描述：判断箭矢是否为光灵箭</li><li>返回：布尔值</li></ul><h4 id="ysm-projectile-owner" tabindex="-1"><a class="header-anchor" href="#ysm-projectile-owner"><span>ysm.projectile_owner</span></a></h4><ul><li>描述：获取发射该箭矢的玩家实体</li><li>返回：玩家实体，可以使用“箭头表达式”查询其属性</li></ul><p>例：<code>v.flame_level ?? (v.flame_level = ysm.projectile_owner-&gt;ysm.equipped_enchantment_level(&#39;Mainhand&#39;, &#39;minecraft:flame&#39;))</code></p><p>解释：<code>将该表达式写在箭矢动画中任意 parallel 动画的指令关键帧的第一帧，能在箭矢射出时获取玩家主手的弓的火矢附魔等级，并存储在 v.flame_level 变量中。不会重复执行。</code></p><p>返回：<code>0</code></p><h4 id="ysm-delta-movement-length" tabindex="-1"><a class="header-anchor" href="#ysm-delta-movement-length"><span>ysm.delta_movement_length</span></a></h4><ul><li>描述：获取箭矢在两 Tick 之间的位移长度，可以用来判断速度；</li><li>返回：数值类型的位移长度。</li></ul><p>Tips：如果速度异常，尝试安装 <a href="https://www.mcmod.cn/class/8885.html" target="_blank" rel="noopener noreferrer">Fast Projectile Fix</a>。</p><h4 id="ysm-texture-name" tabindex="-1"><a class="header-anchor" href="#ysm-texture-name"><span>ysm.texture_name</span></a></h4><ul><li>描述：获取玩家正在使用的材质名称；</li><li>返回值：字符串类型的材质名称，含扩展名；</li></ul><p>例1：<code>ysm.texture_name</code></p><p>例1返回：<code>&#39;blue.png&#39;</code></p><p>例2：<code>ysm.texture_name == &#39;blue.png&#39;</code></p><p>例2返回：<code>true</code></p><h4 id="ysm-mod-version" tabindex="-1"><a class="header-anchor" href="#ysm-mod-version"><span>ysm.mod_version()</span></a></h4><ul><li>描述：获取客户端安装的指定模组的版本；</li><li>参数：字符串类型的模组 id（注意不是模组名称）；</li><li>返回：若已安装该模组则返回版本号字符串，否则返回 null。</li></ul><p>例：<code>ysm.mod_version(&#39;tac&#39;)</code></p><p>返回：<code>&#39;0.3.10.5&#39;</code></p><h4 id="ysm-dump-mods" tabindex="-1"><a class="header-anchor" href="#ysm-dump-mods"><span>ysm.dump_mods</span></a></h4><ul><li>描述：输出已安装的模组信息至聊天框，仅在动画调试模式下有效；</li><li>返回：null</li></ul><h4 id="ysm-dimension-name" tabindex="-1"><a class="header-anchor" href="#ysm-dimension-name"><span>ysm.dimension_name</span></a></h4><ul><li>描述：获取当前维度；</li><li>返回：字符串类型的维度 id。</li></ul><p>例：<code>ysm.dimension_name</code></p><p>返回：<code>&#39;twilightforest:twilightforest&#39;</code>（暮色森林）</p><h4 id="ysm-biome-category" tabindex="-1"><a class="header-anchor" href="#ysm-biome-category"><span><mark>ysm.biome_category</mark></span></a></h4><blockquote><p>注意！<mark>这个变量仅在 1.16.5 和 1.18.2 可以使用</mark></p></blockquote><ul><li>描述：获取玩家所处群系的类别；</li><li>返回：字符串类型的群系类别。</li></ul><p>例：<code>ysm.biome_category == &#39;forest&#39;</code></p><p>返回：<code>true</code></p><table><thead><tr><th>群系类别（1.16.5）</th><th></th></tr></thead><tbody><tr><td>taiga</td><td>针叶林</td></tr><tr><td>extreme_hills</td><td>风袭丘陵</td></tr><tr><td>jungle</td><td>丛林</td></tr><tr><td>mesa</td><td>恶地</td></tr><tr><td>plains</td><td>平原</td></tr><tr><td>savanna</td><td>热带草原</td></tr><tr><td>icy</td><td>冰系群系</td></tr><tr><td>beach</td><td>沙滩</td></tr><tr><td>forest</td><td>森林</td></tr><tr><td>ocean</td><td>海洋</td></tr><tr><td>desert</td><td>沙漠</td></tr><tr><td>river</td><td>河流</td></tr><tr><td>swamp</td><td>沼泽</td></tr><tr><td>mushroom</td><td>蘑菇岛</td></tr><tr><td>nether</td><td>下界</td></tr><tr><td>the_end</td><td>末地</td></tr></tbody></table><h4 id="ysm-weather" tabindex="-1"><a class="header-anchor" href="#ysm-weather"><span>ysm.weather</span></a></h4><ul><li>描述：获取当前天气；</li><li>返回：0：晴天，1：雨或雪，2：雷雨或暴雪。</li></ul><p>例：<code>ysm.weather</code></p><p>返回：<code>1</code></p><p>Tips：下雨还是下雪取决于当前群系以及所处高度，或<a href="https://www.mcmod.cn/class/1132.html" target="_blank" rel="noopener noreferrer">静谧四季</a>之类的模组；</p><h4 id="ysm-is-open-air" tabindex="-1"><a class="header-anchor" href="#ysm-is-open-air"><span>ysm.is_open_air</span></a></h4><ul><li>描述：判断玩家是否处于露天区域；</li><li>返回：布尔值</li></ul><p>Tips：能帮助判断是否正在淋雪，而 <code>q.is_in_water_or_rain</code> 不能。</p><h4 id="query-equipped-item-all-tags" tabindex="-1"><a class="header-anchor" href="#query-equipped-item-all-tags"><span>query.equipped_item_all_tags()</span></a></h4><ul><li>描述：判断玩家装备物品是否包含指定的<strong>所有</strong>物品标签；</li><li>参数①：字符串类型的玩家装备槽，参考 <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/equipmentslot?view=minecraft-bedrock-stable" target="_blank" rel="noopener noreferrer">基岩版文档</a>，注意区分大小写；</li><li>参数②......：任意数量的字符串类型物品标签；</li><li>返回：布尔值</li></ul><p>例：<code>query.equipped_item_all_tags(&#39;Mainhand&#39;, &#39;minecraft:tools&#39;, &#39;minecraft:swords&#39;)</code></p><p>返回：<code>true</code></p><h4 id="query-equipped-item-any-tag" tabindex="-1"><a class="header-anchor" href="#query-equipped-item-any-tag"><span>query.equipped_item_any_tag()</span></a></h4><ul><li>描述：判断玩家装备物品是否包含指定的物品标签中的<strong>任意一个</strong>；</li><li>参数①：字符串类型的玩家装备槽，参考 <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/equipmentslot?view=minecraft-bedrock-stable" target="_blank" rel="noopener noreferrer">基岩版文档</a>，注意区分大小写；</li><li>参数②......：任意数量的字符串类型物品标签；</li><li>返回：布尔值</li></ul><h4 id="query-is-item-name-any" tabindex="-1"><a class="header-anchor" href="#query-is-item-name-any"><span>query.is_item_name_any()</span></a></h4><ul><li>描述：判断玩家装备物品 id 是否为指定的物品 id 中的<strong>任意一个</strong>；</li><li>参数：任意数量的字符串类型物品 id；</li><li>返回：布尔值</li></ul><p>例：<code>q.is_item_name_any(&#39;Mainhand&#39;, &#39;cooked_beef&#39;)</code>（熟牛排）</p><p>返回：<code>true</code></p><h4 id="ysm-equipped-enchantment-level" tabindex="-1"><a class="header-anchor" href="#ysm-equipped-enchantment-level"><span>ysm.equipped_enchantment_level()</span></a></h4><ul><li>描述：获取玩家已装备物品的指定附魔等级；</li><li>参数①：字符串类型的玩家装备槽，参考 <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/equipmentslot?view=minecraft-bedrock-stable" target="_blank" rel="noopener noreferrer">基岩版文档</a>，注意区分大小写；</li><li>参数②：附魔 ID，参考 <a href="https://www.mcmod.cn/item/list/1-5.html" target="_blank" rel="noopener noreferrer">Wiki</a>；</li></ul><p><img src="https://s2.loli.net/2025/01/31/5R6zZdP1tfrxIlO.png" alt="image.png"></p><ul><li>返回值：整数类型的附魔等级。如果附魔不存在，则返回 0。</li></ul><p>例：<code>ysm.equipped_enchantment_level(&#39;Mainhand&#39;, &#39;minecraft:mending&#39;)</code>（获取主手物品经验修补等级）</p><p>返回：<code>1</code></p><h4 id="ysm-dump-equipped-item" tabindex="-1"><a class="header-anchor" href="#ysm-dump-equipped-item"><span>ysm.dump_equipped_item()</span></a></h4><ul><li>描述：输出玩家已装备物品的信息至聊天框，仅在动画调试模式下有效；</li><li>参数①：字符串类型的玩家装备槽，参考 <a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/equipmentslot?view=minecraft-bedrock-stable" target="_blank" rel="noopener noreferrer">基岩版文档</a>，注意区分大小写；</li><li>返回：null</li></ul><h4 id="ysm-relative-block-name" tabindex="-1"><a class="header-anchor" href="#ysm-relative-block-name"><span>ysm.relative_block_name()</span></a></h4><ul><li>描述：获取玩家附近某个方块的 id；</li><li>参数①②③：以玩家为中心的目标方块的相对位置坐标；</li><li>返回：字符串类型的方块 id。</li></ul><p>例：<code>ysm.relative_block_name(0, -1, 0)</code>（玩家脚下的方块）</p><p>返回：<code>&#39;minecraft:sand&#39;</code></p><h4 id="query-relative-block-has-all-tags" tabindex="-1"><a class="header-anchor" href="#query-relative-block-has-all-tags"><span>query.relative_block_has_all_tags()</span></a></h4><ul><li>描述：判断玩家附近某个方块是否包含所有指定的<strong>所有</strong>方块标签；</li><li>参数①②③：以玩家为中心的目标方块的相对位置坐标；</li><li>参数④......：<strong>任意数量</strong>的字符串类型的方块标签；</li><li>返回：布尔值。</li></ul><p>例：<code>q.relative_block_has_all_tags(0, -0.5, 0, &#39;minecraft:sand&#39;, &#39;minecraft:enderman_holdable&#39;)</code></p><p>返回：<code>true</code></p><h4 id="query-relative-block-has-any-tag" tabindex="-1"><a class="header-anchor" href="#query-relative-block-has-any-tag"><span>query.relative_block_has_any_tag()</span></a></h4><ul><li>描述：判断玩家附近某个方块是否包含指定的方块标签中的<strong>任意一个</strong>；</li><li>参数①②③：以玩家为中心的目标方块的相对位置坐标；</li><li>参数④......：<strong>任意数量</strong>的字符串类型的方块标签；</li><li>返回：布尔值。</li></ul><h4 id="ysm-dump-relative-block" tabindex="-1"><a class="header-anchor" href="#ysm-dump-relative-block"><span>ysm.dump_relative_block</span></a></h4><ul><li>描述：输出玩家附近某个方块的信息至聊天框，仅在动画调试模式下有效；</li><li>参数①②③：目标方块的以玩家为中心的相对位置坐标；</li><li>返回：null</li></ul><h4 id="ysm-effect-level" tabindex="-1"><a class="header-anchor" href="#ysm-effect-level"><span>ysm.effect_level()</span></a></h4><ul><li>描述：获取玩家或箭矢上附加的药水效果等级；</li><li>参数①：字符串类型的药水 id；</li><li>返回：数值类型的药水效果等级。如果不存在，则返回 0 。</li></ul><p>例：<code>ysm.effect_level(&#39;minecraft:regeneration&#39;)</code>（获取目标附加的生命恢复效果的等级）</p><p>返回：<code>0</code>（目标没有这个效果）</p><h4 id="ysm-dump-effects" tabindex="-1"><a class="header-anchor" href="#ysm-dump-effects"><span>ysm.dump_effects</span></a></h4><ul><li>描述：输出玩家附加的药水效果的信息至聊天框，仅在动画调试模式下有效；</li><li>返回：null</li></ul><h4 id="query-biome-has-all-tags" tabindex="-1"><a class="header-anchor" href="#query-biome-has-all-tags"><span><mark>query.biome_has_all_tags</mark></span></a></h4><p>由于 1.16 版本没有群系标签，所以该函数只是个占位符，用以维持向前兼容性。</p><p><mark>只能在 1.18 以上的版本可用。</mark></p><h4 id="query-biome-has-any-tags" tabindex="-1"><a class="header-anchor" href="#query-biome-has-any-tags"><span><mark>query.biome_has_any_tags</mark></span></a></h4><p>也是占位符。<mark>只能在 1.18 以上的版本可用。</mark></p><h4 id="_5-自定义箭矢可用的-molang-符号" tabindex="-1"><a class="header-anchor" href="#_5-自定义箭矢可用的-molang-符号"><span>⑤ 自定义箭矢可用的 molang 符号</span></a></h4><p>(大多数是从玩家那边继承过来的，未必都有意义）</p><ul><li><p>ysm.effect_level</p></li><li><p>ysm.texture_name</p></li><li><p>ysm.weather</p></li><li><p>ysm.dimension_name</p></li><li><p>ysm.relative_block_name</p></li><li><p>ysm.mod_version</p></li><li><p>ysm.dump_effects</p></li><li><p>ysm.dump_mods</p></li><li><p>ysm.dump_relative_block</p></li><li><p>ysm.is_passenger</p></li><li><p>ysm.is_sleep</p></li><li><p>ysm.is_sneak</p></li><li><p>ysm.biome_category</p></li><li><p>ysm.on_ground_time</p></li><li><p>ysm.in_ground</p></li><li><p>ysm.projectile_owner</p></li><li><p>ysm.delta_movement_length</p></li><li><p>ysm.is_spectral_arrow</p></li><li><p>ysm.is_open_air</p></li><li><p>q.debug_output</p></li><li><p>q.relative_block_has_all_tags</p></li><li><p>q.relative_block_has_any_tag</p></li><li><p>q.position</p></li><li><p>q.position_delta</p></li><li><p>q.actor_count</p></li><li><p>q.anim_time</p></li><li><p>q.life_time</p></li><li><p>q.moon_phase</p></li><li><p>q.time_of_day</p></li><li><p>q.time_stamp</p></li><li><p>q.body_x_rotation</p></li><li><p>q.body_y_rotation</p></li><li><p>q.yaw_speed</p></li><li><p>q.cardinal_facing_2d</p></li><li><p>q.distance_from_camera</p></li><li><p>q.equipment_count</p></li><li><p>q.eye_target_x_rotation</p></li><li><p>q.eye_target_y_rotation</p></li><li><p>q.ground_speed</p></li><li><p>q.modified_distance_moved</p></li><li><p>q.vertical_speed</p></li><li><p>q.walk_distance</p></li><li><p>q.has_rider</p></li><li><p>q.is_first_person</p></li><li><p>q.is_in_water</p></li><li><p>q.is_in_water_or_rain</p></li><li><p>q.is_on_fire</p></li><li><p>q.is_on_ground</p></li><li><p>q.is_riding</p></li><li><p>q.is_sneaking</p></li><li><p>q.is_spectator</p></li><li><p>q.is_sprinting</p></li><li><p>q.is_swimming</p></li></ul>`,151)])])}const o=a(r,[["render",n]]),d=JSON.parse('{"path":"/wiki/log/120/","title":"1.2.0 更新日志","lang":"zh-CN","frontmatter":{"title":"1.2.0 更新日志","icon":"ic:sharp-update","createTime":"2025/01/26 21:56:40","permalink":"/wiki/log/120/","tags":["更新日志"],"description":"1. 加密系统更新 使用基于 C++ 语言的加密算法，用于加密模型和缓存。并以更安全的方式实现，大幅提高安全性； 设计了新的模型格式以承载加密模型。现在加密的模型文件不再直接包含 json 源文件，而是转换为 YSM 专有的格式。即使被破解也很难还原出模型源文件，更不能重新导入 Blockbench； 设计了加密的网络协议，用于服务端与客户端之间的模型...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2.0 更新日志\\",\\"image\\":[\\"https://s2.loli.net/2025/01/31/5R6zZdP1tfrxIlO.png\\"],\\"dateModified\\":\\"2025-01-31T08:14:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ysm.cfpa.team/wiki/log/120/"}],["meta",{"property":"og:site_name","content":"YSM 文档与教程"}],["meta",{"property":"og:title","content":"1.2.0 更新日志"}],["meta",{"property":"og:description","content":"1. 加密系统更新 使用基于 C++ 语言的加密算法，用于加密模型和缓存。并以更安全的方式实现，大幅提高安全性； 设计了新的模型格式以承载加密模型。现在加密的模型文件不再直接包含 json 源文件，而是转换为 YSM 专有的格式。即使被破解也很难还原出模型源文件，更不能重新导入 Blockbench； 设计了加密的网络协议，用于服务端与客户端之间的模型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2025/01/31/5R6zZdP1tfrxIlO.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-31T08:14:42.000Z"}],["meta",{"property":"article:tag","content":"更新日志"}],["meta",{"property":"article:modified_time","content":"2025-01-31T08:14:42.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://ysm.cfpa.team/en/wiki/log/120/"}]]},"readingTime":{"minutes":12.7,"words":3810},"git":{"createdTime":1737907586000,"updatedTime":1738311282000,"contributors":[{"name":"tartaric_acid","username":"","email":"baka943@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/bd9574205994f1798c96f12ade0a302bb035133cad3e3046540d71244e5dc5c4?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/wiki/更新日志/1.2.0 更新日志.md","headers":[]}');export{o as comp,d as data};
