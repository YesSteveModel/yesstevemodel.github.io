import{_ as e,c as a,a as l,o as r}from"./app-Cp3LFcV5.js";const i={};function s(n,t){return r(),a("div",null,[...t[0]||(t[0]=[l(`<p>过去什么条件下播放什么动画完全是硬编码的，美术没法自定义。</p><p>2.3.0 版本添加了基岩版动画控制器，可以通过控制器自定义动画的播放条件。</p><h2 id="控制器写法" tabindex="-1"><a class="header-anchor" href="#控制器写法"><span>控制器写法</span></a></h2><p>只需要在 <code>ysm.json</code> 文件内添加 <code>animation_controllers</code> 字段即可，案例如下：</p><div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">files</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">player</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">model</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">main</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">models/main.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">arm</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">models/arm.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">animation</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">main</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">animations/main.animation.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parcool</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">animations/parcool.animation.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 可以添加多个文件</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">animation_controllers</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">controller/随便起名字都行啊.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      ],</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">texture</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">textures/texture.png</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动画控制器文件里可以包含多个控制器，你如果喜欢，<strong>也可以将其拆分成多个文件</strong>，反正程序在读取时会自动合并</p><p>控制器文件的名称不受限制，但是其内部命名的控制器需要特定几个名称，如下图所示：</p><p><img src="https://s2.loli.net/2025/01/28/MDi8yJZFOIY1dlH.png" alt="1.png"></p><p>当你添加特定名称的动画控制器时，也就意味着先前硬编码的控制器被替换掉了。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你发现你的 BlockBench 无法导入动画控制器，请尝试移除 GeckoLib 插件后再重新导入。</p></div><p>目前有这些名称可以用，具体什么意思看英文名应该就懂吧，我就不翻译了：</p><h3 id="并行动画" tabindex="-1"><a class="header-anchor" href="#并行动画"><span>并行动画</span></a></h3><p>player.pre_parallel_0<br> player.pre_parallel_1<br> player.pre_parallel_2<br> player.pre_parallel_3<br> player.pre_parallel_4<br> player.pre_parallel_5<br> player.pre_parallel_6<br> player.pre_parallel_7</p><p>player.parallel_0<br> player.parallel_1<br> player.parallel_2<br> player.parallel_3<br> player.parallel_4<br> player.parallel_5<br> player.parallel_6<br> player.parallel_7</p><h3 id="主动画" tabindex="-1"><a class="header-anchor" href="#主动画"><span>主动画</span></a></h3><p>player.main<br> player.pre_main<br> player.post_main</p><h3 id="手部动画" tabindex="-1"><a class="header-anchor" href="#手部动画"><span>手部动画</span></a></h3><p>player.hold_mainhand<br> player.hold_offhand<br> player.pre_hold<br> player.post_hold<br> player.use<br> player.pre_use<br> player.post_use<br> player.swing<br> player.pre_swing<br> player.post_swing</p><h3 id="骑乘和盔甲" tabindex="-1"><a class="header-anchor" href="#骑乘和盔甲"><span>骑乘和盔甲</span></a></h3><p>player.passenger<br> player.vehicle<br> player.armor_feet<br> player.armor_legs<br> player.armor_chest<br> player.armor_head</p><h3 id="gui-动画" tabindex="-1"><a class="header-anchor" href="#gui-动画"><span>GUI 动画</span></a></h3><p>player.gui_hover<br> player.gui_focus</p><h3 id="模组相关" tabindex="-1"><a class="header-anchor" href="#模组相关"><span>模组相关</span></a></h3><p>player.fire（<strong>仅用于 tacz 开火</strong>）<br> player.carry_on<br> player.parcool<br> maid.misc<br> maid.statue</p><h3 id="箭" tabindex="-1"><a class="header-anchor" href="#箭"><span>箭</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>2.5.0 版本后，下列控制器被移除，合并入弹射物控制器</p><details class="hint-container details"><summary>详情</summary><p>arrow.main<br> arrow.parallel_0<br> arrow.parallel_1<br> arrow.parallel_2<br> arrow.parallel_3<br> arrow.parallel_4<br> arrow.parallel_5<br> arrow.parallel_6<br> arrow.parallel_7</p></details></div><h3 id="弹射物" tabindex="-1"><a class="header-anchor" href="#弹射物"><span>弹射物</span></a></h3><p>projectile.main<br> projectile.pre_main<br> projectile.post_main<br> projectile.parallel_0<br> projectile.parallel_1<br> projectile.parallel_2<br> projectile.parallel_3<br> projectile.parallel_4<br> projectile.parallel_5<br> projectile.parallel_6<br> projectile.parallel_7</p><h3 id="载具" tabindex="-1"><a class="header-anchor" href="#载具"><span>载具</span></a></h3><p>vehicle.main<br> vehicle.pre_main<br> vehicle.post_main<br> vehicle.ride<br> vehicle.move</p><p>vehicle.pre_parallel_0<br> vehicle.pre_parallel_1<br> vehicle.pre_parallel_2<br> vehicle.pre_parallel_3<br> vehicle.pre_parallel_4<br> vehicle.pre_parallel_5<br> vehicle.pre_parallel_6<br> vehicle.pre_parallel_7</p><p>vehicle.parallel_0<br> vehicle.parallel_1<br> vehicle.parallel_2<br> vehicle.parallel_3<br> vehicle.parallel_4<br> vehicle.parallel_5<br> vehicle.parallel_6<br> vehicle.parallel_7</p><h3 id="第一人称手臂" tabindex="-1"><a class="header-anchor" href="#第一人称手臂"><span>第一人称手臂</span></a></h3><p>fp.arm.misc<br> fp.arm.parallel_0<br> fp.arm.parallel_1<br> fp.arm.parallel_2<br> fp.arm.parallel_3<br> fp.arm.parallel_4<br> fp.arm.parallel_5<br> fp.arm.parallel_6<br> fp.arm.parallel_7<br> fp.arm.armor_head<br> fp.arm.armor_chest<br> fp.arm.armor_legs<br> fp.arm.armor_feet</p><h2 id="添加的-molang-变量与函数" tabindex="-1"><a class="header-anchor" href="#添加的-molang-变量与函数"><span>添加的 molang 变量与函数</span></a></h2><p>为了方便控制器，我们包装了部分状态，直接添加了以 ctrl 开头的 molang 变量来方便制作动画控制器</p><h3 id="变量-全是布尔值变量" tabindex="-1"><a class="header-anchor" href="#变量-全是布尔值变量"><span>变量（全是布尔值变量）</span></a></h3><table><thead><tr><th style="text-align:center;">molang</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>query.all_animations_finished</code></td><td style="text-align:center;">当前状态下，控制器的全部动画播放完毕时为 true</td></tr><tr><td style="text-align:center;"><code>query.any_animation_finished</code></td><td style="text-align:center;">当前状态下，控制器的任意动画播放完毕时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.death</code></td><td style="text-align:center;">死亡时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.riptide</code></td><td style="text-align:center;">使用三叉戟，触发激流时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.sleep</code></td><td style="text-align:center;">睡觉时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.swim</code></td><td style="text-align:center;">游泳时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.climb</code></td><td style="text-align:center;">趴下并移动时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.climbing</code></td><td style="text-align:center;">趴下不移动时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.ladder_up</code></td><td style="text-align:center;">梯子上上爬时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.ladder_stillness</code></td><td style="text-align:center;">梯子上定住时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.ladder_down</code></td><td style="text-align:center;">梯子上下滑时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.fly</code></td><td style="text-align:center;">飞行时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.elytra_fly</code></td><td style="text-align:center;">鞘翅飞行时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.swim_stand</code></td><td style="text-align:center;">站立式游泳时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.attacked</code></td><td style="text-align:center;">被攻击时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.jump</code></td><td style="text-align:center;">跳跃时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.sneak</code></td><td style="text-align:center;">潜行移动时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.sneaking</code></td><td style="text-align:center;">潜行不移动时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.run</code></td><td style="text-align:center;">跑步时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.walk</code></td><td style="text-align:center;">行走时时为 true</td></tr><tr><td style="text-align:center;"><code>ctrl.idle</code></td><td style="text-align:center;">待命状态时为 true</td></tr></tbody></table><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><p>下面几个为 molang 函数，需要填入参数</p><p>其中第二个参数和原来动画命名有点类似，<code>$</code>物品ID，<code>#</code>物品tag，<code>:</code>特殊类别。</p><table><thead><tr><th style="text-align:center;">molang</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ctrl.hold</code></td><td style="text-align:center;">用法：<code>ctrl.hold(&#39;mainhand&#39;, &#39;$minecraft:apple&#39;)</code></td></tr><tr><td style="text-align:center;"><code>ctrl.swing</code></td><td style="text-align:center;">用法：<code>ctrl.swing(&#39;offhand&#39;, &#39;#minecraft:axes&#39;)</code></td></tr><tr><td style="text-align:center;"><code>ctrl.use</code></td><td style="text-align:center;">用法：<code>ctrl.use(&#39;offhand&#39;, &#39;:eat&#39;)</code></td></tr><tr><td style="text-align:center;"><code>ctrl.armor</code></td><td style="text-align:center;">用法：<code>ctrl.armor(&#39;head&#39;, &#39;$minecraft:iron_helmet&#39;)</code><br>第一个参数有：feet, legs, chest, head</td></tr><tr><td style="text-align:center;"><code>ctrl.ride</code></td><td style="text-align:center;">用法：<code>ctrl.ride(&#39;vehicle&#39;, &#39;$minecraft:pig&#39;)</code><br><code>ctrl.ride(&#39;passenger&#39;, &#39;$minecraft:pig&#39;)</code></td></tr></tbody></table><h2 id="模组兼容相关-molang" tabindex="-1"><a class="header-anchor" href="#模组兼容相关-molang"><span>模组兼容相关 molang</span></a></h2><table><thead><tr><th style="text-align:center;">molang</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>ctrl.carryon_type</code></td><td style="text-align:center;">返回字符串<br>玩家抱起的类型，有三种 <code>block</code> <code>entity</code> <code>player</code><br>如果没有抱起任何东西，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.carryon_is_princess</code></td><td style="text-align:center;">返回布尔值<br>玩家是否<strong>被</strong>抱起</td></tr><tr><td style="text-align:center;"><code>ctrl.parcool_state</code></td><td style="text-align:center;">返回字符串<br>返回当前正在执行的跑酷动作（内容较多，暂不展示）<br>如果没有执行任何跑酷动作，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.swem_is_ride</code></td><td style="text-align:center;">返回布尔值<br>玩家是否<strong>骑乘</strong> SWEM 的马</td></tr><tr><td style="text-align:center;"><code>ctrl.swem_state</code></td><td style="text-align:center;">返回字符串<br>玩家当前正在执行的马术动作<br>如果没有骑 SWEM 的马，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_hold_gun</code></td><td style="text-align:center;">返回布尔值<br>玩家是否主手持 tacz 的枪械</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_gun_type</code></td><td style="text-align:center;">返回字符串<br>玩家当前持有的枪械类型（步枪、手枪那些分类）<br>如果没有持枪，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_gun_id</code></td><td style="text-align:center;">返回字符串<br>玩家当前持有的枪械 ID<br>如果没有持枪，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_is_fire</code></td><td style="text-align:center;">返回布尔值<br>玩家是否正在开火</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_is_aim</code></td><td style="text-align:center;">返回布尔值<br>玩家是否正在瞄准</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_is_reload</code></td><td style="text-align:center;">返回布尔值<br>玩家是否正在重载弹药</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_is_melee</code></td><td style="text-align:center;">返回布尔值<br>玩家是否正在近战（刺刀）</td></tr><tr><td style="text-align:center;"><code>ctrl.tac_is_draw</code></td><td style="text-align:center;">返回布尔值<br>玩家是否正在切枪</td></tr><tr><td style="text-align:center;"><code>ctrl.slashblade_animation</code></td><td style="text-align:center;">返回字符串<br>玩家当前打出的剑技名称<br>如果没有，返回空字符串</td></tr><tr><td style="text-align:center;"><code>ctrl.create_hanging_skyhook</code></td><td style="text-align:center;">返回布尔值<br>玩家当前是否在机械动力悬链上悬挂</td></tr></tbody></table>`,44)])])}const p=e(i,[["render",s]]),c=JSON.parse('{"path":"/wiki/controller/","title":"动画控制器","lang":"zh-CN","frontmatter":{"title":"动画控制器","createTime":"2025/01/28 16:57:45","permalink":"/wiki/controller/","icon":"ant-design:control-filled","description":"过去什么条件下播放什么动画完全是硬编码的，美术没法自定义。 2.3.0 版本添加了基岩版动画控制器，可以通过控制器自定义动画的播放条件。 控制器写法 只需要在 ysm.json 文件内添加 animation_controllers 字段即可，案例如下： 动画控制器文件里可以包含多个控制器，你如果喜欢，也可以将其拆分成多个文件，反正程序在读取时会自动合...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动画控制器\\",\\"image\\":[\\"https://s2.loli.net/2025/01/28/MDi8yJZFOIY1dlH.png\\"],\\"dateModified\\":\\"2025-09-19T10:22:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ysm.cfpa.team/wiki/controller/"}],["meta",{"property":"og:site_name","content":"YSM 文档与教程"}],["meta",{"property":"og:title","content":"动画控制器"}],["meta",{"property":"og:description","content":"过去什么条件下播放什么动画完全是硬编码的，美术没法自定义。 2.3.0 版本添加了基岩版动画控制器，可以通过控制器自定义动画的播放条件。 控制器写法 只需要在 ysm.json 文件内添加 animation_controllers 字段即可，案例如下： 动画控制器文件里可以包含多个控制器，你如果喜欢，也可以将其拆分成多个文件，反正程序在读取时会自动合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2025/01/28/MDi8yJZFOIY1dlH.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-19T10:22:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-19T10:22:49.000Z"}]]},"readingTime":{"minutes":4.02,"words":1206},"git":{"createdTime":1738061882000,"updatedTime":1758277369000,"contributors":[{"name":"tartaric_acid","username":"","email":"baka943@qq.com","commits":5,"avatar":"https://gravatar.com/avatar/bd9574205994f1798c96f12ade0a302bb035133cad3e3046540d71244e5dc5c4?d=retro"},{"name":"KLuoNuoYa","username":"KLuoNuoYa","email":"153290281+KLuoNuoYa@users.noreply.github.com","commits":3,"avatar":"https://avatars.githubusercontent.com/KLuoNuoYa?v=4","url":"https://github.com/KLuoNuoYa"},{"name":"homewool","username":"homewool","email":"93774195+homewool@users.noreply.github.com","commits":3,"avatar":"https://avatars.githubusercontent.com/homewool?v=4","url":"https://github.com/homewool"}]},"autoDesc":true,"filePathRelative":"notes/wiki/模型包制作/动画控制器.md","headers":[]}');export{p as comp,c as data};
