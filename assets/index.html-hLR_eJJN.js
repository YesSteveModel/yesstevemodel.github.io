import{_ as i,c as n,a as e,b as l,d as t,r as p,o as d}from"./app-Cp3LFcV5.js";const c={};function r(h,s){const a=p("VPVideoEmbed");return d(),n("div",null,[s[0]||(s[0]=e(`<p>在 <code>2.5.0</code> 版本，我们加入了自定义函数功能，允许创作者用 molang 编写函数并调用，以实现代码复用。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><ol><li>函数目录默认为<code>functions</code>，<br> 如果要修改，可以在清单文件<code>ysm.json</code>中插入以下字段：</li></ol><div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">files</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //...</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">projectiles</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">            &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">minecraft:arrow</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">                &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">model</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">models/arrow.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">                &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">animation</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">animations/arrow.animation.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">                &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">texture</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">textures/arrow.png</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        },</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">sound_path</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my_sounds</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">function_path</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my_functions</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在该目录中创建函数文件函数名.molang，<br> 函数名不区分大小写，只能包含字母、下划线、数字；<br> 示例:<code>模型文件夹/functions/my_func.molang</code></li></ol><p><img src="https://s21.ax1x.com/2025/09/17/pVhkUSI.webp" alt="pVhkUSI.webp"></p><ol start="3"><li>编写函数：<br> a. 每个语句以分号;结尾；<br> b. 使用args[索引]访问调用时传入的参数；<br> c. 如果执行了return语句，那么此次执行将在此处停止；<br> d. 支持 C 风格注释，详见 <a href="https://www.cainiaojc.com/c-programming/c-code-comments.html" target="_blank" rel="noopener noreferrer">https://www.cainiaojc.com/c-programming/c-code-comments.html</a> ；</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>// 获取第一个参数的值，并赋值至临时变量 a</span></span>
<span class="line"><span>t.a = args[0];</span></span>
<span class="line"><span>// 将变量 t.a 与第二个参数相加，并返回</span></span>
<span class="line"><span>return t.a + args[1];</span></span>
<span class="line"><span>// 由于上面 return 结束了此次调用，下面的语句不会执行</span></span>
<span class="line"><span>q.debug_output(&#39;喵&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="闭包返回" tabindex="-1"><a class="header-anchor" href="#闭包返回"><span>闭包返回</span></a></h2><p>仅在自定义函数内，<code>return</code>语句可以穿透由<code>{...}</code>构成的闭包，跳出多层嵌套循环，结束整个函数的调用。</p><h2 id="链式调用" tabindex="-1"><a class="header-anchor" href="#链式调用"><span>链式调用</span></a></h2><p>在自定义函数内也可以调用自定义函数，形成一条调用链，如 <code>fn.a</code> -&gt; <code>fn.b</code> -&gt; <code>fn.c</code> 。还支持调用自身以实现递归（如有兴趣可参考<a href="https://zhuanlan.zhihu.com/p/165052663" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/165052663</a> ） 注意调用链的长度不能超过 32，否则返回 null。</p><h2 id="临时变量" tabindex="-1"><a class="header-anchor" href="#临时变量"><span>临时变量</span></a></h2><p>临时变量<code>t.*</code>在调用链的每个节点之间不共享，并相互隔离（即使是相同函数）。只有变量<code>v.*</code>可以共享。 在函数调用结束后，临时变量的值将失效。</p><h3 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1"><span>示例1</span></a></h3><ol><li><p>创建两个函数</p><div class="code-block-title" data-title="a.molang"><div class="code-block-title-bar"><span class="title">a.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>t.num = 111;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调用 b 函数（没有参数可以省略小括号）</span></span>
<span class="line"><span>fn.b;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 输出 t.num 的值以便观察</span></span>
<span class="line"><span>q.debug_output(&#39;fn.a: &#39;, t.num);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-title" data-title="b.molang"><div class="code-block-title-bar"><span class="title">b.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>t.num = 222;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 输出 t.num 的值以便观察</span></span>
<span class="line"><span>q.debug_output(&#39;fn.b: &#39;, t.num);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></li><li><p>执行指令 <code>/ysmclient molang execute fn.a</code></p></li><li><p>结果解析</p><p><img src="https://s21.ax1x.com/2025/09/17/pVhkykQ.webp" alt="pVhkykQ.webp"></p><p>可以看到 b 函数中修改了<code>t.num</code>的值，却没有影响到 a 函数。</p></li></ol><h3 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2"><span>示例2</span></a></h3><p>如果将以上两个函数中的 <code>t.num</code> 修改为 <code>v.num</code>。由于 v.* 变量可以共享，结果将输出相同的值。</p><div class="code-block-title" data-title="a.molang"><div class="code-block-title-bar"><span class="title">a.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.num = 111;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调用 b 函数（没有参数可以省略小括号）</span></span>
<span class="line"><span>fn.b;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 输出 v.num 的值以便观察</span></span>
<span class="line"><span>q.debug_output(&#39;fn.a: &#39;, v.num);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-title" data-title="b.molang"><div class="code-block-title-bar"><span class="title">b.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.num = 222;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 输出 v.num 的值以便观察</span></span>
<span class="line"><span>q.debug_output(&#39;fn.b: &#39;, v.num);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><img src="https://s21.ax1x.com/2025/09/17/pVhk2pn.webp" alt="pVhk2pn.webp"></p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><p>不是函数有独立的临时变量，而是调用链中每个节点都有独立的临时变量。即使多次调用同一个函数，每次调用都无法影响之后调用该函数时的临时变量。</p><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧"><span>技巧</span></a></h2><p>可以用以下方式实现 <code>if - else</code>。过去版本的大括号语句<code>{...}</code>有 bug，此快照版已修复。</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.a ? { </span></span>
<span class="line"><span>    ...; // v.a 为 true（非 0 且非 null 值）时执行</span></span>
<span class="line"><span>    ...;</span></span>
<span class="line"><span>} : {</span></span>
<span class="line"><span>    ...; // v.a 为 false（0 或 null 值）时执行</span></span>
<span class="line"><span>    ...;</span></span>
<span class="line"><span>};	// 不要忘了分号结尾</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 虽没有强制要求，但是建议在逻辑表达式较为复杂时，把判断的部分用括号括起来</span></span>
<span class="line"><span>(v.b || v.c &amp;&amp; v.d) ? { </span></span>
<span class="line"><span>    ...;</span></span>
<span class="line"><span>} : {</span></span>
<span class="line"><span>    ...;</span></span>
<span class="line"><span>};	// 不要忘了分号结尾</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用 <code>for_each</code> 遍历参数，详见 <a href="https://wiki.mcbe-dev.net/zh-sg/Molang#for_each" target="_blank" rel="noopener noreferrer">https://wiki.mcbe-dev.net/zh-sg/Molang#for_each</a></p><div class="code-block-title" data-title="sum.molang"><div class="code-block-title-bar"><span class="title">sum.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>// 将任意个参数相加并返回</span></span>
<span class="line"><span>t.sum = 0;</span></span>
<span class="line"><span>for_each(t.arg, args, {</span></span>
<span class="line"><span>    t.sum = t.sum + t.arg;</span></span>
<span class="line"><span>});	// 不要忘了分号结尾</span></span>
<span class="line"><span>return t.sum;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>访问参数时，<code>args[...]</code>内不止可以写数值</p><div class="code-block-title" data-title="test.molang"><div class="code-block-title-bar"><span class="title">test.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>t.a = 1;</span></span>
<span class="line"><span>return args[0] + args[t.a] + args[t.a + 1];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>可以用 <code>loop</code> 执行循环，详见 <a href="https://wiki.mcbe-dev.net/zh-sg/Molang#loop" target="_blank" rel="noopener noreferrer">https://wiki.mcbe-dev.net/zh-sg/Molang#loop</a></p><div class="code-block-title" data-title="sum.molang"><div class="code-block-title-bar"><span class="title">sum.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>// 从 1 加到 10</span></span>
<span class="line"><span>t.num = 0;</span></span>
<span class="line"><span>t.sum = 0;</span></span>
<span class="line"><span>loop(10, {</span></span>
<span class="line"><span>    t.num = t.num + 1;</span></span>
<span class="line"><span>    t.sum = t.sum + t.num;</span></span>
<span class="line"><span>});	// 不要忘了分号结尾</span></span>
<span class="line"><span>return t.sum;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>当然，循环也支持 <code>break</code> 和 <code>continue</code></p><div class="code-block-title" data-title="loop.molang"><div class="code-block-title-bar"><span class="title">loop.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.x = 1;</span></span>
<span class="line"><span>v.y = 1;</span></span>
<span class="line"><span>loop(10, {</span></span>
<span class="line"><span>    t.x = v.x + v.y; </span></span>
<span class="line"><span>    v.x = v.y; </span></span>
<span class="line"><span>    v.y = t.x; </span></span>
<span class="line"><span>    (v.y &gt; 20) ? break;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>v.x = 0;</span></span>
<span class="line"><span>loop(10, {</span></span>
<span class="line"><span>  (v.x &gt; 5) ? continue;</span></span>
<span class="line"><span>  v.x = v.x + 1;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="事件订阅" tabindex="-1"><a class="header-anchor" href="#事件订阅"><span>事件订阅</span></a></h2><p>在触发某些事件时自动调用预设的函数。 使用方法：创建函数文件<code>函数名@事件名.molang</code>即可订阅一个事件。多个函数可以订阅同一个事件，但触发事件时调用这些函数的顺序是随机的。 如：创建<code>setup@player_init.molang</code>即可创建一个名为<code>setup</code>的函数，并订阅<code>player_init</code>事件。 目前支持的事件如下：</p><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">触发时机</th></tr></thead><tbody><tr><td style="text-align:left;">player_init</td><td style="text-align:left;">玩家切换到该模型或玩家实体加载时</td></tr><tr><td style="text-align:left;">player_update</td><td style="text-align:left;">每次更新玩家动画之前</td></tr><tr><td style="text-align:left;">sync</td><td style="text-align:left;">（见下一节）</td></tr></tbody></table><p>同时触发时的顺序：<code>player_init&gt;player_update &gt; sync</code>。 <code>v.roaming</code> 变量的同步在<code>player_init</code>触发之前完成。</p><h2 id="主动同步" tabindex="-1"><a class="header-anchor" href="#主动同步"><span>主动同步</span></a></h2><p>用于解决随机数或部分预置变量（如 ctrl.fly）在服务器上不同玩家的游戏中不同步的问题。</p><h3 id="使用方法-1" tabindex="-1"><a class="header-anchor" href="#使用方法-1"><span>使用方法</span></a></h3><ol><li><p>新建一个函数文件<code>test@sync.molang</code>，订阅<code>sync</code>事件；</p><div class="code-block-title" data-title="test@sync.molang"><div class="code-block-title-bar"><span class="title">test@sync.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>q.debug_output(&#39;同步完成！参数为：&#39;, args[0], &#39; 和 &#39;, args[1])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div></li><li><p>游戏内调用函数<code>ysm.sync</code>；</p><blockquote><p>/ysmclient molang execute ysm.sync(1234, 5678)</p></blockquote></li><li><p>服务器上所有玩家的游戏内将以相同参数触发<code>sync</code>事件；</p></li></ol><p><img src="https://s21.ax1x.com/2025/09/17/pVhk7tJ.webp" alt="pVhk7tJ.webp"></p><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1"><span>注意</span></a></h3><ul><li>最多可以传递<strong>16</strong>个参数，超过会导致解析失败；</li><li>参数类型只支持数值，不支持字符串、结构体等其他类型；</li><li>由于涉及到网络传输，一次同步的开销相当大，不要频繁的发起同步，尤其不能用于物理计算、坐标计算等用途，否则很容易卡服；</li><li>调用<code>ysm.sync</code>发起同步后将立刻结束并返回<code>null</code>，不会卡在这里等待事件触发才结束，也就是不会影响帧数（即“异步”）；</li><li>从发起同步到触发事件可能相隔几十毫秒，要在相当一段时间之后才会生效。</li></ul><h2 id="动画控制" tabindex="-1"><a class="header-anchor" href="#动画控制"><span>动画控制</span></a></h2><p>使用 molang 修改硬编码控制器的逻辑，比基岩版控制器更轻量。</p><h3 id="使用方法-2" tabindex="-1"><a class="header-anchor" href="#使用方法-2"><span>使用方法</span></a></h3><ol><li>确定要修改的控制器名称（参考 wiki），这里以主动画控制器player.main为例；</li></ol><p><img src="https://s21.ax1x.com/2025/09/17/pVhkO6x.webp" alt="pVhkO6x.webp"></p><ol start="2"><li>在自定义函数目录内创建动画控制函数<code>@player_ctrl_main.molang</code>，文件名即为动画控制器的名称把.替换成_ctrl_。</li></ol><p><img src="https://s21.ax1x.com/2025/09/17/pVhkx0O.webp" alt="pVhkx0O.webp"></p><pre><code>该函数每帧都会自动执行一次。
</code></pre><h2 id="控制逻辑" tabindex="-1"><a class="header-anchor" href="#控制逻辑"><span>控制逻辑</span></a></h2><h3 id="_1-调用ctrl-set-animation-设置动画" tabindex="-1"><a class="header-anchor" href="#_1-调用ctrl-set-animation-设置动画"><span>1. 调用<code>ctrl.set_animation(...)</code>设置动画：</span></a></h3><ul><li><p>该函数接受 1~2 个参数，第一个参数为动画名称，第二个参数可选，为动画循环类型。若不指定循环类型，则使用动画预设的循环类型（即 BlockBench 内设置的类型）。可用的循环类型如下：</p><table><thead><tr><th style="text-align:left;">循环类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ctrl.loop</td><td style="text-align:left;">永远循环</td></tr><tr><td style="text-align:left;">ctrl.play_once</td><td style="text-align:left;">只播放一次</td></tr><tr><td style="text-align:left;">ctrl.hold_on_last_frame</td><td style="text-align:left;">停在最后一帧</td></tr></tbody></table><ul><li>示例1：ctrl.set_animation(&#39;walk&#39;, ctrl.loop);</li><li>示例2：ctrl.set_animation(&#39;run&#39;);</li></ul></li><li><p>调用该函数后，控制器将切换到指定动画，但未必立刻播放；</p></li><li><p>注意如果设置的动画与控制器当前动画相同，则该操作会被忽略，而不是重载当前动画（即使当前动画已停止）；</p></li><li><p>若要重载动画，需要在设置动画之前调用<code>ctrl.indicate_reload</code>（无参数）。</p></li></ul><h3 id="_2-返回动画控制谓词" tabindex="-1"><a class="header-anchor" href="#_2-返回动画控制谓词"><span>2. 返回动画控制谓词</span></a></h3><p>在设置动画之后，需要使用<code>return</code>表达式返回一个谓词，指示控制器在这一帧内如何处理当前动画。可用的谓词如下。</p><table><thead><tr><th style="text-align:left;">谓词</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ctrl.state_continue</td><td style="text-align:left;">正常播放当前动画。</td></tr><tr><td style="text-align:left;">ctrl.state_pause</td><td style="text-align:left;">暂停播放，但是不暂停时间轴。可以使当前动画失效一段时间。</td></tr><tr><td style="text-align:left;">ctrl.state_stop</td><td style="text-align:left;">平滑地停止当前动画。</td></tr><tr><td style="text-align:left;">ctrl.state_bypass</td><td style="text-align:left;">表示当前控制逻辑无操作，使动画控制器转而使用内置的控制逻辑。<br>如果返回该谓词，前面可以不设置动画。</td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>return ctrl.state_continue;</span></span>
<span class="line"><span>return ctrl.state_stop;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当返回<code>ctrl.state_bypass</code>时，下方的<code>ctrl.state_stop</code>不执行。</p><h3 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h3><ul><li>可调用<code>ctrl.reset</code>（无参数）立刻重置动画控制器至初始状态。若有动画正在播放，会粗暴的中止而不会平滑过渡。此外，该函数还包含了<code>ctrl.indicate_reload</code>的作用；</li><li>可以通过<code>q.all_animations_finished</code>检测当前动画是否已播放完毕；</li><li>可以配合基岩版控制器用的<code>ctrl.xxx</code>变量判断当前实体状态，如<code>ctrl.idle</code>判断是否正在待机状态。</li></ul><h2 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h2><div class="code-block-title" data-title="@player_ctrl_main.molang"><div class="code-block-title-bar"><span class="title">@player_ctrl_main.molang</span></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-plain"><span class="line"><span>v.test_main == 1 ? {</span></span>
<span class="line"><span>    ctrl.set_animation(&#39;run&#39;);</span></span>
<span class="line"><span>    return ctrl.state_continue;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>v.test_main == 2 ? {</span></span>
<span class="line"><span>    ctrl.set_animation(&#39;walk&#39;, ctrl.loop);</span></span>
<span class="line"><span>    return ctrl.state_continue;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>return ctrl.state_bypass;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>该控制逻辑在<code>v.test_main</code>值为 1 时播放动画<code>run</code>，值为 2 时播放动画<code>walk</code>。其它情况使用动画控制器内置的逻辑（即返回 bypass）。效果如下：</p>`,67)),l(a,{src:"https://player.bilibili.com/player.html?bvid=BV1jWpxzGEoq&autoplay=0&high_quality=1",width:"100%",title:"Bilibili",type:"bilibili"}),s[1]||(s[1]=t("p",null,"注意尾巴转圈是内置控制逻辑设置的飞行动画。",-1))])}const m=i(c,[["render",r]]),v=JSON.parse('{"path":"/wiki/molang/script/","title":"自定义函数","lang":"zh-CN","frontmatter":{"title":"自定义函数","createTime":"2025/09/17 12:02:26","permalink":"/wiki/molang/script/","icon":"mdi:script","author":"TomatoPuddin","tags":["molang","脚本","函数"],"description":"在 2.5.0 版本，我们加入了自定义函数功能，允许创作者用 molang 编写函数并调用，以实现代码复用。 使用方法 函数目录默认为functions， 如果要修改，可以在清单文件ysm.json中插入以下字段： 在该目录中创建函数文件函数名.molang， 函数名不区分大小写，只能包含字母、下划线、数字； 示例:模型文件夹/functions/my...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义函数\\",\\"image\\":[\\"https://s21.ax1x.com/2025/09/17/pVhkUSI.webp\\",\\"https://s21.ax1x.com/2025/09/17/pVhkykQ.webp\\",\\"https://s21.ax1x.com/2025/09/17/pVhk2pn.webp\\",\\"https://s21.ax1x.com/2025/09/17/pVhk7tJ.webp\\",\\"https://s21.ax1x.com/2025/09/17/pVhkO6x.webp\\",\\"https://s21.ax1x.com/2025/09/17/pVhkx0O.webp\\"],\\"dateModified\\":\\"2025-09-19T10:22:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TomatoPuddin\\"}]}"],["meta",{"property":"og:url","content":"https://ysm.cfpa.team/wiki/molang/script/"}],["meta",{"property":"og:site_name","content":"YSM 文档与教程"}],["meta",{"property":"og:title","content":"自定义函数"}],["meta",{"property":"og:description","content":"在 2.5.0 版本，我们加入了自定义函数功能，允许创作者用 molang 编写函数并调用，以实现代码复用。 使用方法 函数目录默认为functions， 如果要修改，可以在清单文件ysm.json中插入以下字段： 在该目录中创建函数文件函数名.molang， 函数名不区分大小写，只能包含字母、下划线、数字； 示例:模型文件夹/functions/my..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s21.ax1x.com/2025/09/17/pVhkUSI.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-19T10:22:49.000Z"}],["meta",{"property":"article:author","content":"TomatoPuddin"}],["meta",{"property":"article:tag","content":"函数"}],["meta",{"property":"article:tag","content":"脚本"}],["meta",{"property":"article:tag","content":"molang"}],["meta",{"property":"article:modified_time","content":"2025-09-19T10:22:49.000Z"}]]},"readingTime":{"minutes":7.31,"words":2192},"git":{"createdTime":1758277369000,"updatedTime":1758277369000,"contributors":[{"name":"KLuoNuoYa","username":"KLuoNuoYa","email":"153290281+KLuoNuoYa@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/KLuoNuoYa?v=4","url":"https://github.com/KLuoNuoYa"},{"name":"homewool","username":"homewool","email":"93774195+homewool@users.noreply.github.com","commits":3,"avatar":"https://avatars.githubusercontent.com/homewool?v=4","url":"https://github.com/homewool"},{"name":"tartaric_acid","username":"","email":"baka943@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/bd9574205994f1798c96f12ade0a302bb035133cad3e3046540d71244e5dc5c4?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/wiki/molang/自定义函数.md","headers":[]}');export{m as comp,v as data};
