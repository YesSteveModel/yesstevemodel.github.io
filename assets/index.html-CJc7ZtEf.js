import{_ as r,c as o,a as s,b as t,w as i,r as d,o as p,d as e,e as n}from"./app-Cp3LFcV5.js";const c={};function g(h,a){const l=d("VPCard");return p(),o("div",null,[a[4]||(a[4]=s('<p>molang 是 mojang 官方为基岩版动画设计的一种极其简单的语言，我们可以通过 molang 实现各种复杂的动画。</p><p>自 1.2.0 起，我们支持几乎所有的官方 molang 特性（如下所示），你可以查看官方文档来学习使用它们：</p><ul><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Strings" target="_blank" rel="noopener noreferrer">字符串类型</a></li><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Variables" target="_blank" rel="noopener noreferrer">自定义变量</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#??%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer">空值合并运算符</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener noreferrer">二元条件运算符</a></li><li><a href="https://bedrock.dev/zh/docs/stable/Molang#Aliases" target="_blank" rel="noopener noreferrer">别名</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener noreferrer">复杂表达式</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%7B%7D%E8%8A%B1%E6%8B%AC%E5%8F%B7%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AE%9A%E7%95%8C%E7%AC%A6" target="_blank" rel="noopener noreferrer">作用域定界符</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#loop" target="_blank" rel="noopener noreferrer">loop 循环</a>，<a href="https://wiki.mcbe-dev.net/zh-cn/Molang#continue" target="_blank" rel="noopener noreferrer">continue</a>、<a href="https://wiki.mcbe-dev.net/zh-cn/Molang#break" target="_blank" rel="noopener noreferrer">break</a>（for_each 也支持，但目前没用到）</li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#%E7%BB%93%E6%9E%84%E4%BD%93" target="_blank" rel="noopener noreferrer">结构体</a></li><li><a href="https://wiki.mcbe-dev.net/zh-cn/Molang#-%3E%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer">箭头表达式</a></li></ul><h2 id="molang-是什么" tabindex="-1"><a class="header-anchor" href="#molang-是什么"><span>molang 是什么</span></a></h2><p>为了更加清晰的说明什么是 molang，以及理解它的机制，我们从基岩版动画的机制说起。</p><p>基岩版动画的机制非常简单，在不同的时间点新建关键帧，设定某个组件的位置/旋转/缩放。当开始播放动画时，程序就会自动计算出补间动画，使组件从某个地方移动/旋转/缩放到另一个地方，从而做出动画的效果。</p><p><img src="https://s2.loli.net/2023/02/11/xykIWa7bTqSBnfm.png" alt="5.png"></p><p>我们给每个关键帧设置的是一个具体的数字，决定了播放到此关键帧时，组件所处的位置/旋转的角度/缩放的大小</p><p><img src="https://s2.loli.net/2023/02/11/Uz8XTsCNJMcb3tZ.png" alt="6.png"></p><p>但是一些特殊情况下，这个数字不一定是固定的。比如我们期望玩家手持物品时摆动角度为 30 度，但空手时摆动角度为 60 度，这时我们就可以使用 molang 表达式了。</p><p>一个常用的动画设计是显示/隐藏模型，比如我们期望在玩家穿戴头盔时，显示头盔组件。我们可以使用缩放功能来隐藏组件，当组件的 X Y Z 缩放均为 0 时，该组件就被隐藏了，所以我们可以在 BlockBench 里面这么写：</p><p><img src="https://s2.loli.net/2023/02/11/1gAHJNZfwmu6qzL.png" alt="7.png"></p><p>这里的 <code>ysm.has_helmet</code> 就是一个 molang 参数，它会在玩家穿戴头盔时返回数字 1，而在没有穿戴头盔时返回数字 0，正好做到了我们想要的隐藏/显示功能。</p><p>一直以来，长发模型是一个极为头疼的问题。当玩家抬头时，长长的头发就会随头转动，直戳戳的穿入玩家的身体内。我们也可以用 molang 来巧妙的解决这个问题。思路如下：</p><ol><li>当玩家仰头时，头发不再随头转动，而是垂直向下（也就是头发旋转角度与头部正好相反，互相抵消）</li><li>当玩家俯看时，头发随头转动（也就是旋转角度为 0）</li></ol><p>那么我们就可以这样书写 molang 参数：</p><p><img src="https://s2.loli.net/2023/02/11/POS9uIYbKBfJwxi.png" alt="8.png"></p><p>我们来逐条介绍这个参数的意思：</p><p>这是一个条件式的写法，它的格式是这样写的 <code>判断条件 ? 如果符合时返回的结果 : 如果不符时返回的结果</code></p><div class="language-molang line-numbers-mode" data-highlighter="shiki" data-ext="molang" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-molang"><span class="line"><span>(ysm.head_pitch &gt; 0) ? -ysm.head_pitch : 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>（ysm.head_pitch &gt; 0）</code>：判断条件。玩家俯仰的角度是 -90 度到 90 度，这里判断玩家俯仰的角度是否大于 0 度，用括号括更加直观。</p><p><code>-ysm.head_pitch</code>：当玩家俯仰角度大于 0 时（也就是抬头时），我们特意取反，把头发旋转角度抵消回去。</p><p><code>0</code>：当玩家俯仰角度小于 0 时（也就是俯视时），我们将其变成 0，这样头发就会随头旋转。</p><h2 id="与基岩版的差异" tabindex="-1"><a class="header-anchor" href="#与基岩版的差异"><span>与基岩版的差异</span></a></h2><ul><li>未初始化的变量为 null 值，可以用空值合并运算符识别，参与数值类计算时被视为 0 或 false；</li><li>结构体不支持嵌套；</li><li>玩家在切换模型、重生、传送至部分维度、退出重进以及其他类似操作后将清空所有变量存储。</li></ul><h2 id="相关调试指令" tabindex="-1"><a class="header-anchor" href="#相关调试指令"><span>相关调试指令</span></a></h2>',26)),t(l,null,{default:i(()=>[...a[0]||(a[0]=[e("p",null,"在本地玩家身上执行 molang 表达式，并输出结果至聊天框。仅单人游戏有效。",-1),e("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-"},[e("span",{class:"line"},[e("span",null,"/ysmclient molang execute <expr>")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])]),_:1}),t(l,null,{default:i(()=>[...a[1]||(a[1]=[e("p",null,"向自定义调试屏幕添加 molang 表达式，会实时计算和更新；",-1),e("ul",null,[e("li",null,[e("code",null,"pre"),n(" 在动画更新前执行，"),e("code",null,"post"),n(" 在动画更新后执行。")]),e("li",null,[e("code",null,"2.2.2"),n(" 及之前的版本需要按两次 "),e("code",null,"Alt"),n(" + "),e("code",null,"B"),n(" 才能进入自定义调试屏幕")]),e("li",null,[e("code",null,"2.3.0"),n(" 及往后的版本只需要按一次 "),e("code",null,"Alt"),n(" + "),e("code",null,"B"),n(" 就能进入自定义调试屏幕")])],-1),e("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-"},[e("span",{class:"line"},[e("span",null,"/ysmclient molang watch add [pre|post] <name> <expr>")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])]),_:1}),t(l,null,{default:i(()=>[...a[2]||(a[2]=[e("p",null,"管理自定义调试屏幕上的条目。",-1),e("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-"},[e("span",{class:"line"},[e("span",null,"/ysmclient molang watch remove <name>")]),n(`
`),e("span",{class:"line"},[e("span",null,"/ysmclient molang watch clear")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])]),_:1}),t(l,null,{default:i(()=>[...a[3]||(a[3]=[e("p",null,"在指定玩家身上执行 molang；多人游戏下可用，需要管理员权限。不会输出执行结果。",-1),e("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-"},[e("span",{class:"line"},[e("span",null,"/ysm molang execute <player> <expr>")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])]),_:1}),a[5]||(a[5]=s('<h2 id="roaming-变量" tabindex="-1"><a class="header-anchor" href="#roaming-变量"><span><code>roaming</code> 变量</span></a></h2><p>以 <code>v.roaming.xxx</code> 格式书写的变量（<strong>不能</strong>简写为 <code>v.r.xxx</code>）可以在切换维度、重生、退出重进后恢复。也能在玩家之间同步会，并且会跟随服务端的 cap 写入存档。</p><p>但是此变量有一些限制：</p><ul><li>一个模型最多有 16 个 <code>roaming</code> 变量，所有模型共享这 16 个变量</li><li>变量名称的字符数不能大于 16</li><li>变量只能存储 <code>float</code> 类型</li></ul>',4))])}const u=r(c,[["render",g]]),k=JSON.parse('{"path":"/wiki/molang/index/","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","createTime":"2025/01/28 15:46:18","permalink":"/wiki/molang/index/","icon":"carbon:script","description":"molang 是 mojang 官方为基岩版动画设计的一种极其简单的语言，我们可以通过 molang 实现各种复杂的动画。 自 1.2.0 起，我们支持几乎所有的官方 molang 特性（如下所示），你可以查看官方文档来学习使用它们： 字符串类型 自定义变量 空值合并运算符 二元条件运算符 别名 复杂表达式 作用域定界符 loop 循环，continu...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"https://s2.loli.net/2023/02/11/xykIWa7bTqSBnfm.png\\",\\"https://s2.loli.net/2023/02/11/Uz8XTsCNJMcb3tZ.png\\",\\"https://s2.loli.net/2023/02/11/1gAHJNZfwmu6qzL.png\\",\\"https://s2.loli.net/2023/02/11/POS9uIYbKBfJwxi.png\\"],\\"dateModified\\":\\"2025-02-02T10:04:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ysm.cfpa.team/wiki/molang/index/"}],["meta",{"property":"og:site_name","content":"YSM 文档与教程"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"molang 是 mojang 官方为基岩版动画设计的一种极其简单的语言，我们可以通过 molang 实现各种复杂的动画。 自 1.2.0 起，我们支持几乎所有的官方 molang 特性（如下所示），你可以查看官方文档来学习使用它们： 字符串类型 自定义变量 空值合并运算符 二元条件运算符 别名 复杂表达式 作用域定界符 loop 循环，continu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2023/02/11/xykIWa7bTqSBnfm.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-02T10:04:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-02T10:04:44.000Z"}]]},"readingTime":{"minutes":4.5,"words":1350},"git":{"createdTime":1738061882000,"updatedTime":1738490684000,"contributors":[{"name":"tartaric_acid","username":"","email":"baka943@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/bd9574205994f1798c96f12ade0a302bb035133cad3e3046540d71244e5dc5c4?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/wiki/molang/简介.md","headers":[]}');export{u as comp,k as data};
